// --- –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã ---
const textArea = document.getElementById('inputText');
const countButton = document.getElementById('countButton');
const resultDiv = document.getElementById('result');
const clearButton = document.getElementById('clearButton');
const saveButton = document.getElementById('saveButton');
const savedPoemsList = document.getElementById('savedPoemsList');
const lightRed = document.getElementById('lightRed');
const lightYellow = document.getElementById('lightYellow');
const lightGreen = document.getElementById('lightGreen');
const trafficLightCommentDiv = document.getElementById('trafficLightComment');
const searchWordInput = document.getElementById('searchWordInput');
const searchButtonsContainer = document.querySelector('#dictionaryHelper .search-buttons-container');
const vowels = "–∞–µ—ë–∏–æ—É—ã—ç—é—è";
const initialResultText = "–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç...";

// --- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞ ---
const comments = {
    green: ["–†–∏—Ç–º –∏–¥–µ–∞–ª–µ–Ω! ü§ñ‚ú®", "–ú—É–∑–∞ –æ–¥–æ–±—Ä—è–µ—Ç! üëç", "–í—Å—ë —Ç–æ—á–Ω–æ, –∫–∞–∫ —à–≤–µ–π—Ü–∞—Ä—Å–∫–∏–µ —á–∞—Å—ã! üá®üá≠‚öôÔ∏è"],
    yellow: ["–ï—Å—Ç—å –Ω–µ—Ä–æ–≤–Ω–æ—Å—Ç–∏, –Ω–æ –∂–∏—Ç—å –º–æ–∂–Ω–æ. ü§î", "–†–∏—Ç–º —Å–ª–µ–≥–∫–∞ —Ö—Ä–æ–º–∞–µ—Ç. üò¨", "–°–ª–æ–≥–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏. üöß"],
    red: ["–ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞! üí•", "–í–∞—à —Ä–∏—Ç–º —Ç–æ–ª—å–∫–æ —á—Ç–æ —É–±–∏–ª –∫–æ—Ç—ë–Ω–∫–∞. üòø", "–ü–æ–ª–Ω—ã–π —Ö–∞–æ—Å, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–≤–æ—é –º—É–∑—É. üî•"],
    default: ["–°–≤–µ—Ç–æ—Ñ–æ—Ä –∂–¥—ë—Ç –≤–∞—à–∏—Ö —Ç–≤–æ—Ä–µ–Ω–∏–π... ‚ú®", "–ü–æ–ª–µ –ø—É—Å—Ç–æ, –∫–∞–∫ –¥—É—à–∞ –∫–∏–±–æ—Ä–≥–∞. ü§ñüíî"]
};

// --- –ü–æ–¥—Å—á—ë—Ç —Å–ª–æ–≥–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∞—Ö ---
function countSyllablesInLine(line) {
    const lowerLine = line.toLowerCase();
    let syllableCount = 0;
    for (let char of lowerLine) {
        if (vowels.includes(char)) syllableCount++;
    }
    return syllableCount || (line.trim().length > 0 ? 1 : 0); // –ú–∏–Ω–∏–º—É–º 1 —Å–ª–æ–≥ –¥–ª—è –Ω–µ–ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
}

// --- –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ ---
function processAndDisplayResults() {
    const fullText = textArea.value;
    resetTrafficLightsAndComment();

    if (!fullText.trim()) {
        resultDiv.innerHTML = "–ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–µ–≤—Å—Ç–≤–µ–Ω–Ω–æ —á–∏—Å—Ç–æ...";
        return;
    }

    const lines = fullText.split('\n');
    let resultsHTML = "";
    const syllableCounts = lines.map(countSyllablesInLine);

    for (let [index, line] of lines.entries()) {
        resultsHTML += `${line} (${syllableCounts[index]} —Å–ª–æ–≥–æ–≤)<br>`;
    }

    resultDiv.innerHTML = resultsHTML;
    updateTrafficLight(syllableCounts);
}

// --- –õ–æ–≥–∏–∫–∞ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞ ---
function updateTrafficLight(syllableCounts) {
    const dominantCount = getDominantSyllableCount(syllableCounts);
    let yellowWarnings = 0, redAlerts = 0;

    for (let count of syllableCounts) {
        const deviation = Math.abs(count - dominantCount);
        if (deviation === 2) yellowWarnings++;
        else if (deviation > 2) redAlerts++;
    }

    if (redAlerts >= 2 || yellowWarnings >= 3) {
        lightRed.classList.add('active');
        trafficLightCommentDiv.textContent = getRandomComment('red');
    } else if (yellowWarnings >= 1) {
        lightYellow.classList.add('active');
        trafficLightCommentDiv.textContent = getRandomComment('yellow');
    } else {
        lightGreen.classList.add('active');
        trafficLightCommentDiv.textContent = getRandomComment('green');
    }
}

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–≥–æ —á–∏—Å–ª–∞ —Å–ª–æ–≥–æ–≤ ---
function getDominantSyllableCount(syllableCounts) {
    const counts = new Map();
    let maxCount = 0, dominant = syllableCounts[0];

    for (let count of syllableCounts) {
        counts.set(count, (counts.get(count) || 0) + 1);
        if (counts.get(count) > maxCount) {
            maxCount = counts.get(count);
            dominant = count;
        }
    }
    return dominant;
}

// --- –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π ---
function clearFields() {
    textArea.value = "";
    resultDiv.innerHTML = initialResultText;
    resetTrafficLightsAndComment();
}

// --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∏—Ö–æ–≤ ---
function savePoem() {
    const poem = textArea.value.trim();
    if (!poem) {
        alert("–ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å ‚Äî –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ!");
        return;
    }
    const poems = JSON.parse(localStorage.getItem("savedPoems")) || [];
    poems.unshift(poem);
    localStorage.setItem("savedPoems", JSON.stringify(poems));
    loadSavedPoems();
    alert("–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!");
}

// --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Ç–∏—Ö–æ–≤ ---
function loadSavedPoems() {
    const poems = JSON.parse(localStorage.getItem("savedPoems")) || [];
    savedPoemsList.innerHTML = "";
    poems.forEach((poem, index) => {
        const li = document.createElement("li");
        li.innerHTML = `<span>${poem.substring(0, 30)}${poem.length > 30 ? "..." : ""}</span>
                        <button onclick="loadPoem(${index})">üìñ</button>
                        <button onclick="deletePoem(${index})">üóëÔ∏è</button>`;
        savedPoemsList.appendChild(li);
    });
}

function loadPoem(index) {
    const poems = JSON.parse(localStorage.getItem("savedPoems")) || [];
    if (poems[index]) textArea.value = poems[index];
}

function deletePoem(index) {
    const poems = JSON.parse(localStorage.getItem("savedPoems")) || [];
    poems.splice(index, 1);
    localStorage.setItem("savedPoems", JSON.stringify(poems));
    loadSavedPoems();
}

// --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –õ–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ö–æ–º–±–∞–π–Ω–∞ ---
if (searchButtonsContainer) {
    searchButtonsContainer.addEventListener('click', (event) => {
        if (event.target.classList.contains('search-btn')) {
            const word = searchWordInput.value.trim();
            const searchType = event.target.dataset.searchType;
            if (!word) {
                trafficLightCommentDiv.textContent = "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!";
                return;
            }
            let query = "";
            switch (searchType) {
                case "synonyms": query = `—Å–∏–Ω–æ–Ω–∏–º—ã –∫ —Å–ª–æ–≤—É ${word}`; break;
                case "rhymes": query = `—Ä–∏—Ñ–º—ã –∫ —Å–ª–æ–≤—É ${word}`; break;
                case "meaning": query = `–∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞ ${word}`; break;
                case "antonyms": query = `–∞–Ω—Ç–æ–Ω–∏–º—ã –∫ —Å–ª–æ–≤—É ${word}`; break;
                case "etymology": query = `—ç—Ç–∏–º–æ–ª–æ–≥–∏—è —Å–ª–æ–≤–∞ ${word}`; break;
            }
            if (query) window.open(`https://www.google.com/search?q=${encodeURIComponent(query)}`, '_blank');
        }
    });
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ —Å–≤–µ—Ç–æ—Ñ–æ—Ä—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º ---
const trafficLightContainer = document.getElementById('trafficLightContainer');

trafficLightContainer.addEventListener('click', () => {
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–º—É
    const body = document.body;
    if (body.classList.contains('dark-theme')) {
        body.classList.remove('dark-theme');
        body.classList.add('light-theme');
    } else {
        body.classList.remove('light-theme');
        body.classList.add('dark-theme');
    }

    // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: –ú–∏–≥–∞–µ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–º
    flashLights();
});

// --- –§—É–Ω–∫—Ü–∏—è –º–∏–≥–∞–Ω–∏—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞ ---
function flashLights() {
    // –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –æ–≥–æ–Ω—å–∫–∏
    lightRed.classList.add('active');
    lightYellow.classList.add('active');
    lightGreen.classList.add('active');

    // –ß–µ—Ä–µ–∑ 500 –º—Å –≤—ã–∫–ª—é—á–∞–µ–º –∏—Ö
    setTimeout(() => {
        lightRed.classList.remove('active');
        lightYellow.classList.remove('active');
        lightGreen.classList.remove('active');
    }, 500); // 500 –º—Å
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
function resetTrafficLightsAndComment() {
    lightRed.classList.remove('active');
    lightYellow.classList.remove('active');
    lightGreen.classList.remove('active');
    trafficLightCommentDiv.textContent = getRandomComment('default');
}

function getRandomComment(type) {
    const typeComments = comments[type] || comments.default;
    return typeComments[Math.floor(Math.random() * typeComments.length)];
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
document.addEventListener('DOMContentLoaded', () => {
    loadSavedPoems();
    resetTrafficLightsAndComment();
});

// --- –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π ---
if (countButton) countButton.addEventListener('click', processAndDisplayResults);
if (clearButton) clearButton.addEventListener('click', clearFields);
if (saveButton) saveButton.addEventListener('click', savePoem);
